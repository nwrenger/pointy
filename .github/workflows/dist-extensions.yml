name: Build & Package Extensions

on:
  workflow_dispatch:
  push:
    paths:
      - "crates/extensions/**"

env:
  CDN_BASE_URL: "https://my.cdn" # ← replace with your real CDN root

jobs:
  build:
    strategy:
      matrix:
        include:
          - target: aarch64-apple-darwin
            runner: macos-latest
            lib_ext: dylib
            platform: darwin-aarch64
          - target: x86_64-apple-darwin
            runner: macos-latest
            lib_ext: dylib
            platform: darwin-x86_64
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
            lib_ext: so
            platform: linux-x86_64
          - target: x86_64-pc-windows-gnu
            runner: windows-latest
            lib_ext: dll
            platform: windows-x86_64

    runs-on: ${{ matrix.runner }}
    env:
      TARGET: ${{ matrix.target }}
      PLATFORM: ${{ matrix.platform }}
      LIB_EXT: ${{ matrix.lib_ext }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'linux-x86_64'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxcb1 libxrandr2 libdbus-1-3 libx11-dev libgtk-3-dev \
            libsoup2.4-dev libwebkit2gtk-4.1-dev libappindicator3-dev \
            librsvg2-dev patchelf libdbus-1-dev pkg-config

      - name: Install dependencies (Windows only)
        if: matrix.platform == 'windows-x86_64'
        shell: pwsh
        run: choco install zip -y

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./ -> target"

      - name: Build extensions
        shell: bash
        run: |
          for ext in crates/extensions/*; do
            [ -d "$ext" ] || continue
            pushd "$ext"
            cargo build --release --target "$TARGET"
            popd
          done

      - name: Prepare dist
        run: mkdir -p dist

      - name: Package extensions
        shell: bash
        run: |
          for ext in crates/extensions/*; do
            [ -d "$ext" ] || continue
            name=$(basename "$ext")
            out="dist/$name/$PLATFORM"
            mkdir -p "$out"

            if [[ "$PLATFORM" == "windows-x86_64" ]]; then
              src="target/$TARGET/release/${name}.${LIB_EXT}"
              lib_filename="lib.${LIB_EXT}"
            else
              src="target/$TARGET/release/lib${name}.${LIB_EXT}"
              case "$PLATFORM" in
                darwin-*) lib_filename="lib.dylib" ;;
                linux-*) lib_filename="lib.so"    ;;
              esac
            fi

            cp "$src"            "$out/$lib_filename"
            cp "$ext/assets/icon.svg"    "$out/"
            cp "$ext/assets/manifest.json" "$out/"

            pushd "$out"
            zip -r "${name}_${PLATFORM}.zip" ./*
            popd
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extensions-dist
          path: dist

  prepare-release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo (for version lookups & cdn path)
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: extensions-dist
          path: dist

      - name: Generate update_manifest.json for each extension
        shell: bash
        run: |
          set -euo pipefail

          # find all extension names by zip filename prefix
          mapfile -t names < <(
            find dist -type f -name "*.zip" \
              | xargs -n1 basename \
              | sed -E 's/^(.+)_.+\.zip$/\1/' \
              | sort -u
          )

          for name in "${names[@]}"; do
            version=$(jq -r .version crates/extensions/"$name"/assets/manifest.json)
            manifest="{\"version\":\"$version\",\"assets\":{"
            first=true

            while IFS= read -r zip; do
              fname=$(basename "$zip")
              plat="${fname#${name}_}"
              plat="${plat%.zip}"
              checksum=$(sha256sum "$zip" | cut -d' ' -f1)
              url="${CDN_BASE_URL}/${name}/${fname}"

              if $first; then first=false; else manifest+=","; fi
              manifest+="\"$plat\":{\"url\":\"$url\",\"checksum\":\"$checksum\"}"
            done < <(find dist -type f -name "${name}_*.zip")

            manifest+="}}"
            mkdir -p "dist/$name"
            echo "$manifest" > "dist/$name/update_manifest.json"
            echo "→ dist/$name/update_manifest.json"
          done

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-packages
          path: dist

  publish:
    needs: prepare-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-packages
          path: dist

      - name: Upload assets to latest release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag=$(gh api repos/${{ github.repository }}/releases/latest --jq .tag_name)
          echo "Uploading to release $tag…"
          gh release upload "$tag" dist/**/*.zip dist/**/update_manifest.json --clobber
